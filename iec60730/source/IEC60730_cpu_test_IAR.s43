;/* --COPYRIGHT--,BSD
; * Copyright (c) 2013, Texas Instruments Incorporated
; * All rights reserved.
; *
; * Redistribution and use in source and binary forms, with or without
; * modification, are permitted provided that the following conditions
; * are met:
; *
; * *  Redistributions of source code must retain the above copyright
; *    notice, this list of conditions and the following disclaimer.
; *
; * *  Redistributions in binary form must reproduce the above copyright
; *    notice, this list of conditions and the following disclaimer in the
; *    documentation and/or other materials provided with the distribution.
; *
; * *  Neither the name of Texas Instruments Incorporated nor the names of
; *    its contributors may be used to endorse or promote products derived
; *    from this software without specific prior written permission.
; *
; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
; * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
; * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
; * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
; * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
; * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
; * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
; * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; * --/COPYRIGHT--*/
;//*****************************************************************************
;//
;//IEC60730_cpu_test.asm - CPU Tests for IEC60730 Class B.
;//
;//*****************************************************************************
#include <msp430.h>
#include "IEC60730_system_config.h"
#include "IEC60730_user_config.h"
 

;//*****************************************************************************
;//
;//! Test CPU registers
;//!
;//! This C-callable assembly routine tests CPU core registers for stuck at bits.
;//! The following registers are tested:
;//!	- R4
;//!	- SP
;//!	- SR
;//!	- R5-R15
;//! The registers are tested in the order listed above
;//!
;//! Modified registers are \b R4, \b SP, \b SR, and \b R5-R15
;//!
;//! \return SIG_CPU_REG_TEST.- if test does not detects stuck at bits.
;//!         TEST_FAILED. - if test detects stuck at bits in CPU registers and
;//! 						JUMP_TO_FAILSAFE is disabled in
;//!						"IEC60730_user_config.h".
;//
;//*****************************************************************************

        NAME    IEC60730_CPU_TEST_testCpuRegisters


	PUBLIC	IEC60730_CPU_TEST_testCpuRegisters
        RSEG    CODE

IEC60730_CPU_TEST_testCpuRegisters

;*******************************************************************************
;Constants for testing purposes
;*******************************************************************************

#if (defined(__IAR_SYSTEMS_ICC__) && (__CODE_MODEL__==__CODE_MODEL_SMALL__)) ; CPU test for MSP430 SMALL CODE MODEL
      PUSH      R4
      MOV.W     #0xAAAA,R4         ; Write and Check 0xAAAA
      CMP.W     #0xAAAA,R4         ; To register R4
      JNE       RestorePC
      MOV.W     #0x5555,R4
      CMP.W     #0x5555,R4
      JNE       RestorePC
      POP       R4


      MOV.W     SP,R4              ; Save value of SP in R4
      MOV.W     #0xAAAA,SP
      CMP.W     #0xAAAA,SP
      JNE       TestFailed
      MOV.W     #0x5554,SP         ; Any WRITE to LSB is ignored and is always
      CMP.W     #0x5554,SP         ; READ as '0'
      JNE       TestFailed
      MOV.W     R4,SP              ; Restore value of SP


      MOV.W     SR,R4              ; Save SP in R4
      MOV.W     #0xAAAA,SR
      CMP.W     #0xAAAA,SR
      JNE       TestFailed

      MOV.W     #0x5545,SR
      CMP.W     #0x5545,SR         ; Clearing CPUOFF bit to avoid MSP430 to go
      JNE       TestFailed         ; To LPM

      MOV.W     R4,SR

StabilizeLoop
#if defined(__MSP430_HAS_CS__)
#if defined(CSKEY)
      MOV.W     #CSKEY,&CSCTL0
#endif
; To support MSP430FR2xx families FR57xx and FR2xx devices have different CS 
; module functioanlity
#if defined(__MSP430FR2633) || defined(__MSP430FR2632) || defined(__MSP430FR2533) || defined(MSP430FR2532) 
      BIC.W	#XT1OFFG + DCOFFG,&CSCTL7
      BIC.W	#OFIFG,&SFRIFG1
      BIT.W     #OFIFG,&SFRIFG1
      JC        StabilizeLoop
#elif defined(XT1OFFG) && defined(XT2OFFG)
      BIC.W	#(XT1OFFG + XT2OFFG),&CSCTL5
#else  
      BIC.W	#(LFXTOFFG + LFXTOFFG),&CSCTL5
#endif 
      BIC.W	#OFIFG,&SFRIFG1
      BIT.W     #OFIFG,&SFRIFG1
      JC        StabilizeLoop
	  
#elif defined(__MSP430_HAS_UCS__)
      BIC.W	#XT2OFFG + XT1LFOFFG + DCOFFG,&UCSCTL7
      BIC.W	#OFIFG,&SFRIFG1
      BIT.W     #OFIFG,&SFRIFG1
      JC        StabilizeLoop
#elif defined(__MSP430_HAS_BC2__)
      BIC.W	#IFG1,&OFIFG
      BIT.W     #IFG1,&OFIFG
      JC        StabilizeLoop
#endif

      MOV.W     R5,R4
      MOV.W     #0xAAAA,R5         ; Write and Check #0xAAAA
      CMP.W     #0xAAAA,R5         ; To register R5
      JNE       TestFailed
      MOV.W     #0x5555,R5         ; Write and Check #0x5555
      CMP.W     #0x5555,R5         ; To register R5
      JNE       TestFailed
      MOV.W     R4,R5

      MOV.W     R6,R4
      MOV.W     #0xAAAA,R6         ; Write and Check #0xAAAA
      CMP.W     #0xAAAA,R6         ; To register R6
      JNE       TestFailed
      MOV.W     #0x5555,R6         ; Write and Check #0x5555
      CMP.W     #0x5555,R6         ; To register R6
      JNE       TestFailed
      MOV.W     R4,R6

      MOV.W     R7,R4
      MOV.W     #0xAAAA,R7         ; Write and Check #0xAAAAA
      CMP.W     #0xAAAA,R7         ; To register R7
      JNE       TestFailed
      MOV.W     #0x5555,R7         ; Write and Check #0x5555
      CMP.W     #0x5555,R7         ; To register R7
      JNE       TestFailed
      MOV.W     R4,R7

      MOV.W     R8,R4
      MOV.W     #0xAAAA,R8         ; Write and Check #0xAAAA
      CMP.W     #0xAAAA,R8         ; To register R8
      JNE       TestFailed
      MOV.W     #0x5555,R8         ; Write and Check #0x5555
      CMP.W     #0x5555,R8         ; To register R8
      JNE       TestFailed
      MOV.W     R4,R8

      MOV.W     R9,R4
      MOV.W     #0xAAAA,R9         ; Write and Check #0xAAAA
      CMP.W     #0xAAAA,R9         ; To register R9
      JNE       TestFailed
      MOV.W     #0x5555,R9         ; Write and Check #0x5555
      CMP.W     #0x5555,R9         ; To register R9
      JNE       TestFailed
      MOV.W     R4,R9
      
      MOV.W     R10,R4
      MOV.W     #0xAAAA,R10        ; Write and Check #0xAAAA
      CMP.W     #0xAAAA,R10        ; To register R10
      JNE       TestFailed
      MOV.W     #0x5555,R10        ; Write and Check #0x5555
      CMP.W     #0x5555,R10        ; To register R10
      JNE       TestFailed
      MOV.W     R4,R10

      MOV.W     R11,R4
      MOV.W     #0xAAAA,R11        ; Write and Check #0xAAAA
      CMP.W     #0xAAAA,R11        ; To register R11
      JNE       TestFailed
      MOV.W     #0x5555,R11        ; Write and Check #0x5555
      CMP.W     #0x5555,R11        ; To register R11
      JNE       TestFailed
      MOV.W     R4,R11

      MOV.W     R12,R4
      MOV.W     #0xAAAA,R12        ; Write and Check #0xAAAA
      CMP.W     #0xAAAA,R12        ; To register R12
      JNE       TestFailed
      MOV.W     #0x5555,R12        ; Write and Check #0x5555
      CMP.W     #0x5555,R12        ; To register R12
      JNE       TestFailed
      MOV.W     R4,R12

      MOV.W     R13,R4
      MOV.W     #0xAAAA,R13        ; Write and Check #0xAAAA
      CMP.W     #0xAAAA,R13        ; To register R13
      JNE       TestFailed
      MOV.W     #0x5555,R13        ; Write and Check #0x5555
      CMP.W     #0x5555,R13        ; To register R13
      JNE       TestFailed
      MOV.W     R4,R13
      
      MOV.W     R14,R4
      MOV.W     #0xAAAA,R14        ; Write and Check #0xAAAA
      CMP.W     #0xAAAA,R14        ; To register R14
      JNE       TestFailed
      MOV.W     #0x5555,R14        ; Write and Check #0x5555
      CMP.W     #0x5555,R14        ; To register R14
      JNE       TestFailed
      MOV.W     R4,R14
      
      MOV.W     R15,R4
      MOV.W     #0xAAAA,R15        ; Write and Check #0xAAAA
      CMP.W     #0xAAAA,R15        ; To register R15
      JNE       TestFailed
      MOV.W     #0x5555,R15        ; Write and Check #0x5555
      CMP.W     #0x5555,R15        ; To register R15
      JNE       TestFailed
      MOV.W     R4,R15

#else
      PUSHX.A R4
      MOVA    #0xAAAAA,R4          ; Write and Check 0xAAAAA
      CMPA    #0xAAAAA,R4          ; To register R4
      JNE     RestorePC
      MOVA    #0x55555,R4          ; Write and Check 0x55555
      CMPA    #0x55555,R4	   	   ; To register R4
      JNE     RestorePC
      POPX.A  R4

      MOVA    SP,R4                ; Save value of SP in R4
      MOVA    #0xAAAAA,SP
      CMPA    #0xAAAAA,SP
      JNE     TestFailed
      MOVA    #0x55554,SP          ; Any WRITE to LSB is ignored and is always
      CMPA    #0x55554,SP          ; READ as '0'
      JNE     TestFailed
      MOVA    R4,SP                ; Restore value of SP

      MOV     SR,R4                ; Save SP in R4
      NOP
      MOV   #0xAAAA,SR
      NOP
      CMP   #0x0AAA,SR
      JNE     TestFailed
      NOP
      MOV   #0x5545,SR
      NOP
      CMP   #0x0545,SR             ; Clearing CPUOFF bit to avoid MSP430 to go
      JNE     TestFailed           ; To LPM
      NOP
      MOV     R4,SR
      NOP

StabilizeLoop
#if defined(__MSP430_HAS_CS__)
#if defined(CSKEY)
      MOV.W     #CSKEY,&CSCTL0
#endif
; To support MSP430FR2xx families FR57xx and FR2xx devices have different CS 
; module functioanlity
#if defined(__MSP430FR2633) || defined(__MSP430FR2632) || defined(__MSP430FR2533) || defined(MSP430FR2532) 
      BIC.W	#XT1OFFG + DCOFFG,&CSCTL7
      BIC.W	#OFIFG,&SFRIFG1
      BIT.W     #OFIFG,&SFRIFG1
      JC        StabilizeLoop
#elif defined(XT1OFFG) && defined(XT2OFFG)
      BIC.W	#(XT1OFFG + XT2OFFG),&CSCTL5
#else  
      BIC.W	#(LFXTOFFG + LFXTOFFG),&CSCTL5
#endif
 
      BIC.W	#OFIFG,&SFRIFG1
      BIT.W     #OFIFG,&SFRIFG1
      JC        StabilizeLoop
#elif defined(__MSP430_HAS_UCS__)
      BIC.W	#XT2OFFG + XT1LFOFFG + DCOFFG,&UCSCTL7
      BIC.W	#OFIFG,&SFRIFG1
      BIT.W     #OFIFG,&SFRIFG1
      JC        StabilizeLoop
#elif defined(__MSP430_HAS_BC2__)
      BIC.W	#IFG1,&OFIFG
      BIT.W     #IFG1,&OFIFG
      JC        StabilizeLoop
#endif

      MOVA      R5,R4
      MOVA      #0xAAAAA,R5        ; Write and Check 0xAAAAA
      CMPA      #0xAAAAA,R5        ; To register R5
      JNE       TestFailed
      MOVA      #0x55555,R5        ; Write and Check 0x55555
      CMPA      #0x55555,R5        ; To register R5
      JNE       TestFailed
      MOVA      R4,R5
      
      MOVA      R6,R4
      MOVA      #0xAAAAA,R6        ; Write and Check 0xAAAAA
      CMPA      #0xAAAAA,R6        ; To register R6
      JNE       TestFailed
      MOVA      #0x55555,R6        ; Write and Check 0x55555
      CMPA      #0x55555,R6        ; To register R6
      JNE       TestFailed
      MOVA      R4,R6

      MOVA      R7,R4
      MOVA      #0xAAAAA,R7        ; Write and Check 0xAAAAA
      CMPA      #0xAAAAA,R7        ; To register R7
      JNE       TestFailed
      MOVA      #0x55555,R7        ; Write and Check 0x55555
      CMPA      #0x55555,R7        ; To register R7
      JNE       TestFailed
      MOVA      R4,R7

      MOVA      R8,R4
      MOVA      #0xAAAAA,R8        ; Write and Check 0xAAAAA
      CMPA      #0xAAAAA,R8        ; To register R8
      JNE       TestFailed
      MOVA      #0x55555,R8        ; Write and Check 0x55555
      CMPA      #0x55555,R8        ; To register R8
      JNE       TestFailed
      MOVA      R4,R8

      MOVA      R9,R4
      MOVA      #0xAAAAA,R9        ; Write and Check 0xAAAAA
      CMPA      #0xAAAAA,R9        ; To register R9
      JNE       TestFailed
      MOVA      #0x55555,R9        ; Write and Check 0x55555
      CMPA      #0x55555,R9        ; To register R9
      JNE       TestFailed
      MOVA      R4,R9

      MOVA      R10,R4
      MOVA      #0xAAAAA,R10       ; Write and Check 0xAAAAA
      CMPA      #0xAAAAA,R10       ; To register R10
      JNE       TestFailed
      MOVA      #0x55555,R10       ; Write and Check 0x55555
      CMPA      #0x55555,R10       ; To register R10
      JNE       TestFailed
      MOVA      R4,R10

      MOVA      R11,R4
      MOVA      #0xAAAAA,R11       ; Write and Check 0xAAAAA
      CMPA      #0xAAAAA,R11       ; To register R11
      JNE       TestFailed
      MOVA      #0x55555,R11       ; Write and Check 0x55555
      CMPA      #0x55555,R11       ; To register R11
      JNE       TestFailed
      MOVA      R4,R11

      MOVA      R12,R4
      MOVA      #0xAAAAA,R12       ; Write and Check 0xAAAAA
      CMPA      #0xAAAAA,R12       ; To register R12
      JNE       TestFailed
      MOVA      #0x55555,R12       ; Write and Check 0x55555
      CMPA      #0x55555,R12       ; To register R12
      JNE       TestFailed
      MOVA      R4,R12

      MOVA      R13,R4
      MOVA      #0xAAAAA,R13       ; Write and Check 0xAAAAA
      CMPA      #0xAAAAA,R13       ; To register R13
      JNE       TestFailed
      MOVA      #0x55555,R13       ; Write and Check 0x55555
      CMPA      #0x55555,R13       ; To register R13
      JNE       TestFailed
      MOVA      R4,R13
      
      MOVA      R14,R4
      MOVA      #0xAAAAA,R14       ; Write and Check 0xAAAAA
      CMPA      #0xAAAAA,R14       ; To register R14
      JNE       TestFailed
      MOVA      #0x55555,R14       ; Write and Check 0x55555
      CMPA      #0x55555,R14       ; To register R14
      JNE       TestFailed
      MOVA      R4,R14

      MOVA      R15,R4
      MOVA      #0xAAAAA,R15       ; Write and Check 0xAAAAA
      CMPA      #0xAAAAA,R15       ; To register R15
      JNE       TestFailed
      MOVA      #0x55555,R15       ; Write and Check 0x55555
      CMPA      #0x55555,R15       ; To register R15
      JNE       TestFailed
	  MOVA     	R4,R15


      #endif

End_test
      MOV      #SIG_CPU_REG_TEST,R12
#if (defined(__IAR_SYSTEMS_ICC__) && (__CODE_MODEL__==__CODE_MODEL_SMALL__))      
      RET
#else
      RETA
#endif
RestorePC 
#if (defined(__IAR_SYSTEMS_ICC__) && (__CODE_MODEL__==__CODE_MODEL_SMALL__))
      POP   R4
#else
      POPX.A      R4
#endif
TestFailed
      CLR       R12
   
#if (defined(__IAR_SYSTEMS_ICC__) && (__CODE_MODEL__==__CODE_MODEL_SMALL__))      
      RET
#else
      RETA
#endif

      END
	  
	  	  